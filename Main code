#include <iostream>

using std::cout;

#include <vector>

class Field

{

private:

    int nx_;

    int ny_;

    std::vector<double> data_;

public:

    Field(int nx, int ny) : nx_(nx), ny_(ny), data_  ((nx+1) * (ny+1) )

    {

        for (int i=0;i<(nx+1)*(ny+1);i++) data_[i]=0.0;

    }

    

    double& operator() (int x, int y)

    {

        return data_[x + (nx_+1)*y];

    }

    

    int nx() const { return nx_ ; }

    int ny() const { return ny_ ; }

    


};



bool points(int x, int y, int nx,int ny)

{

    

    int x0 = int(0.2*nx); int x1 = int (0.8*nx);

    int y0 = int(0.2*ny); int y1 = int(0.8*ny);

    

    

    if (y == y0 && x >= x0 && x <= x1) return false;

    

    if (x == x1 && y >= y0 && y <= y1) return false;

    

    if (y == y1 && x >= x0 && x <= x1) return false;

    

    

    return true;

}









double relaxer(double w, Field& phi)

{

    double new_phi = 0.0;

    int nx = phi.nx();

    int ny = phi.ny();

    

    for (int x = 1; x < nx; x++)

        

            for (int y = 1; y < ny; y++)

            {

                //Need to account for boundary conditions in loop otherwise relaxer loops over them

                

                if (points(x,y, nx,ny))

                {

                    new_phi = 0.25*(phi(x-1,y) + phi(x+1,y) + phi(x,y-1) + phi(x,y+1)) - phi(x,y);

                    phi(x,y) += w*new_phi;

                }

                

                

             }

    

        

    return new_phi;

}



void b_c(Field& phi)

{

    

    int nx = phi.nx();

    int ny = phi.ny();

    

    int x0 = int(0.2*nx); int x1 = int (0.8*nx);

    int y0 = int(0.2*ny); int y1 = int(0.8*ny);



    

    

    for (int x = x0; x0 <= x1; x++)

    {

        phi(x, y0) = 1;

    }

    

    for (int y = y0; y0 <= y1; y++)

    {

        phi(x1,y) = -1;

    }

    

    for (int x = x0; x0 <= x1; x++)

    {

        phi(x, y1) = -1;

    }

    

    

}





//defining the derivative function



double derivative(Field& phi, double x, double y)

{

    double h = 1.0;

    return (1.0/2.0*h)*(4*phi(h,y) - phi(2*h,y) - 3*phi(x,y));

}





void plot(Field& phi)

{

    

    int nx = phi.nx();

    int ny = phi.ny();

    for (int x=0;x<=nx;x++)

    {

        for (int y=0;y<=ny;y++)

            cout << double(x)/double(nx) << " " << double(y)/double(ny)

            << " " << phi(x,y) << "\n";

        cout << "\n";

    }

}

// ------------------------------------------------------------





int main()

{

    

    int n = 300;

    double w = 1.95;

    

    Field phi(n,n);

    

    

    b_c(phi);

    

    double phi_new;

    

    while ((phi_new = relaxer(w,phi)) >10e-7)

    {

        { std::cerr << phi_new << "\n";}

        

    }

    

    

    cout << phi(0.2*n, 0.5*n) << "\n";

    

    

    plot(phi);

    

    //cout << derivative(phi, 0.2*k, 0.5*k) << "\n";

    

    

    

    

    }

