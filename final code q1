#include <iostream>
using std::cout;
#include "Field.hpp"

bool points(int x, int y, int nx, int ny)
{
    int x0,x1,y0,y1;
    
    x0 = int(0.2 * nx); y0 = int(0.2 * nx);
    x1 = int(0.6 * nx); y1 = int(0.8 * nx);
    
    if (x==x1 && y >= y0 && y <= y1) return false;
    
    if (y==y0 && x >= x0 && x <= x1) return false;
    
    if (y==y1 && x >= x0 && x <= x1) return false;
    
    return true;
}





double relaxer(double w, Field& phi)
{
    double delta_phi = 0.0;
    int nx = phi.nx();
    int ny = phi.ny();
    
    
    for (int x=1;x<nx;x++)
    {
        for (int y=1;y<ny;y++)
        {
            if (points(x,y,nx,ny)) // Only update points not on boundaries
            {
                double old_phi =
                0.25 * (phi(x+1,y) + phi(x-1,y) + phi(x,y+1) + phi(x,y-1))
                - phi(x,y);
                delta_phi += old_phi * old_phi;
                phi(x,y) += w * old_phi;
            }
        }
    }
    return delta_phi;
    
}





void b_c(Field& phi)
{
    int nx = phi.nx();
    
    int x0,x1,x2,y0,y1;
    
    
    
    x0 = int(0.2 * nx); y0 = int(0.2 * nx);
    x1 = int(0.6 * nx); y1 = int(0.8 * nx); x2 = int(0.8 * nx);
    
    
    for (int x=x0;x<=x1;x++) phi(x, y0) = 1.0;
        
    
    for (int y=y0;y<=y1;y++) phi(x1, y) = -1.0;
    
    
    for (int x=x0;x<=x2;x++) phi(x, y1) = -1.0;
    
    }



double derivative(Field& phi)

{
    int n = 100;
    int x = 0.2*n;
    int y = 0.5*n;
    double h = 1.0;
    
    return (1.0/2.0*h)*(4*phi(h,y) - phi(2*h,y) - 3*phi(x,y));
    
}




int main()
{
    
    double w = 1.95;
    int n=100;
    
    
    Field phi(n,n);
    
    
    b_c(phi);
    
    
  
    double delta_phi;
    
    do{
        relaxer(w,phi);
    } while ((delta_phi = relaxer(w, phi)) > 1.0e-4); // good enough convergence
    
    
    cout << phi(0.2*n,0.5*n) << " " << derivative(phi) <<  "\n";
    
    
    }
