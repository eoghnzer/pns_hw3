//
//  PNS_HW3_Q2.cpp
//  PNS HW3
//
//  Created by eoghan  mc namara on 10/11/2018.
//  Copyright Â© 2018 eoghan  mc namara. All rights reserved.
//


#include <iostream>
using std::cout;
#include "Field.hpp"



//Defining the boolean to ensure that boundary terms arent looped over

bool points(int x, int y, int nx, int ny)
{
    int x0,x1,x2,y0,y1;
    
    x0 = int(0.2 * nx); y0 = int(0.2 * nx);
    x1 = int(0.6 * nx); x2 = int(0.8 * nx); y1 = int(0.8 * nx);
    
    int x0_neu, x1_neu, y0_neu, y1_neu; // External Boundary conditions
    
    x0_neu = int(0.0 * nx); x1_neu = int (1.0 * nx);
    y0_neu = int(0.0 * nx); y1_neu = int (1.0 * nx);
    
    //ensuring the relaxer function doesnt run for external (neumann) boundary conditions
    
    if (x==x0_neu && y>= y0_neu && y <= y1_neu) return false;
    
    if (x==x1_neu && y>= y0_neu && y <= y1_neu) return false;
    
    if (y==y0_neu && x>= x0_neu && x <= x1_neu) return false;
    
    if (y==y1_neu && x>= x0_neu && x <= x1_neu) return false;
    
    //ensuring the relaxer function doesnt run for internal (dirichlet) boundary conditions
    
    if (x==x1 && y >= y0 && y <= y1) return false;
    
    if (y==y0 && x >= x0 && x <= x1) return false;
    
    if (y==y1 && x >= x0 && x <= x2) return false;
    
    return true;
}



//Defining the relaxer function

double relaxer(double w, Field& phi)
{
    double delta_phi = 0.0;
    int nx = phi.nx();
    int ny = phi.ny();
    
    
    for (int x=0;x<nx;x++)
    {
        for (int y=0;y<ny;y++)
        {
            if (points(x,y,nx,ny)) // Only update points not on boundaries
            {
                double old_phi =
                0.25 * (phi(x+1,y) + phi(x-1,y) + phi(x,y+1) + phi(x,y-1))
                - phi(x,y);
                delta_phi += old_phi * old_phi;
                phi(x,y) += w * old_phi;
            }
        }
    }
    return delta_phi;
    
}


//defining the partial derivative functions, but with the extra condition of neumann boundary conditions


double derivative_x(Field& phi, int x, int y)

{
    int x0_neu, x1_neu, y0_neu, y1_neu;
    int nx;
    
    x0_neu = int(0.0 * nx); x1_neu = int (1.0 * nx);
    y0_neu = int(0.0 * nx); y1_neu = int (1.0 * nx);

    double h = 0.01;
    
    //defining the neumann boundary conditions
    
    if (x==x0_neu && y>= y0_neu && y <= y1_neu)
    {
        return 0.0;
    }
    else if (x==x1_neu && y>= y0_neu && y <= y1_neu)
    {
        return 0.0;
    }
    
    //returning the normal value of the derivative for all other values
    
    else return (1.0/2.0*h)*(4*phi(h,y) - phi(2*h,y) - 3*phi(x,y));
    
}

double derivative_y(Field& phi, int x, int y)

{
    int x0_neu, x1_neu, y0_neu, y1_neu;
    int nx;
    
    x0_neu = int(0.0 * nx); x1_neu = int (1.0 * nx);
    y0_neu = int(0.0 * nx); y1_neu = int (1.0 * nx);

    double h = 0.001;
    if (y==y0_neu && x>= x0_neu && x <= x1_neu)
    {
        return 0.0;
    }
    else if (y==y1_neu && x>= x0_neu && x <= x1_neu)
    {
        return 0.0;
    }
    
    
    return (1.0/2.0*h)*(4*phi(x,h) - phi(x,2*h) - 3*phi(x,y));
    
}


//filling the boundary conditions

void b_c(Field& phi)
{
    int nx = phi.nx();
    
    int x0,x1,x2,y0,y1;
    
    
    
    x0 = int(0.2 * nx); y0 = int(0.2 * nx);
    x1 = int(0.6 * nx); y1 = int(0.8 * nx); x2 = int(0.8 * nx);
    
    
    int x0_neu, x1_neu, y0_neu, y1_neu;
    
    x0_neu = int(0.0 * nx); x1_neu = int (1.0 * nx);
    y0_neu = int(0.0 * nx); y1_neu = int (1.0 * nx);
    
    
    
    for (int x=x0;x<=x1;x++) phi(x, y0) = 1.0;
        
    
    for (int y=y0;y<=y1;y++) phi(x1, y) = -1.0;
    
    
    for (int x=x0;x<=x2;x++) phi(x, y1) = -1.0;
    
    //loading the neumann boundary conditions
    
    for (int x = x0_neu; x <= x1_neu; x++) derivative_y(phi, x, y0_neu);
    
    for (int x = x0_neu; x <= x1_neu; x++) derivative_y(phi, x, y1_neu);
    
    for (int y = y0_neu; y <= y1_neu; y++) derivative_x(phi, x0_neu, y);
    
    for (int y = y0_neu; y <= y1_neu; y++) derivative_x(phi, x1_neu, y);

    
    }





int main()
{
    
    double w = 1.95;
    int n=100;
    
    
    Field phi(n,n);
    
    
    b_c(phi);
    
    
  
    double delta_phi;
    
    //running till sufficient convergence
    
    do{
        relaxer(w,phi);
    } while ((delta_phi = relaxer(w, phi)) > 1.0e-4);
    
    
    cout << "The value of the partial derivative wrt x at (0.2,0.5) with h = 0.01 is" << " " << derivative_x(phi, 0.2*n, 0.5*n) <<  "\n";
    
    
    }
